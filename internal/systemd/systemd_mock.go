// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package systemd

import (
	"context"
	"github.com/coreos/go-systemd/v22/dbus"
	"sync"
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
//	func TestSomethingThatUsesInterface(t *testing.T) {
//
//		// make and configure a mocked Interface
//		mockedInterface := &InterfaceMock{
//			CloseFunc: func()  {
//				panic("mock out the Close method")
//			},
//			IsConnectedFunc: func() bool {
//				panic("mock out the IsConnected method")
//			},
//			ListUnitsByNamesFunc: func(ctx context.Context, units []string) ([]dbus.UnitStatus, error) {
//				panic("mock out the ListUnitsByNames method")
//			},
//		}
//
//		// use mockedInterface in code that requires Interface
//		// and then make assertions.
//
//	}
type InterfaceMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func()

	// IsConnectedFunc mocks the IsConnected method.
	IsConnectedFunc func() bool

	// ListUnitsByNamesFunc mocks the ListUnitsByNames method.
	ListUnitsByNamesFunc func(ctx context.Context, units []string) ([]dbus.UnitStatus, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// IsConnected holds details about calls to the IsConnected method.
		IsConnected []struct {
		}
		// ListUnitsByNames holds details about calls to the ListUnitsByNames method.
		ListUnitsByNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Units is the units argument value.
			Units []string
		}
	}
	lockClose            sync.RWMutex
	lockIsConnected      sync.RWMutex
	lockListUnitsByNames sync.RWMutex
}

// Close calls CloseFunc.
func (mock *InterfaceMock) Close() {
	if mock.CloseFunc == nil {
		panic("InterfaceMock.CloseFunc: method is nil but Interface.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedInterface.CloseCalls())
func (mock *InterfaceMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// IsConnected calls IsConnectedFunc.
func (mock *InterfaceMock) IsConnected() bool {
	if mock.IsConnectedFunc == nil {
		panic("InterfaceMock.IsConnectedFunc: method is nil but Interface.IsConnected was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsConnected.Lock()
	mock.calls.IsConnected = append(mock.calls.IsConnected, callInfo)
	mock.lockIsConnected.Unlock()
	return mock.IsConnectedFunc()
}

// IsConnectedCalls gets all the calls that were made to IsConnected.
// Check the length with:
//
//	len(mockedInterface.IsConnectedCalls())
func (mock *InterfaceMock) IsConnectedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsConnected.RLock()
	calls = mock.calls.IsConnected
	mock.lockIsConnected.RUnlock()
	return calls
}

// ListUnitsByNames calls ListUnitsByNamesFunc.
func (mock *InterfaceMock) ListUnitsByNames(ctx context.Context, units []string) ([]dbus.UnitStatus, error) {
	if mock.ListUnitsByNamesFunc == nil {
		panic("InterfaceMock.ListUnitsByNamesFunc: method is nil but Interface.ListUnitsByNames was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Units []string
	}{
		Ctx:   ctx,
		Units: units,
	}
	mock.lockListUnitsByNames.Lock()
	mock.calls.ListUnitsByNames = append(mock.calls.ListUnitsByNames, callInfo)
	mock.lockListUnitsByNames.Unlock()
	return mock.ListUnitsByNamesFunc(ctx, units)
}

// ListUnitsByNamesCalls gets all the calls that were made to ListUnitsByNames.
// Check the length with:
//
//	len(mockedInterface.ListUnitsByNamesCalls())
func (mock *InterfaceMock) ListUnitsByNamesCalls() []struct {
	Ctx   context.Context
	Units []string
} {
	var calls []struct {
		Ctx   context.Context
		Units []string
	}
	mock.lockListUnitsByNames.RLock()
	calls = mock.calls.ListUnitsByNames
	mock.lockListUnitsByNames.RUnlock()
	return calls
}
